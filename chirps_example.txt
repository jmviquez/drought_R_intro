install.packages("terra")
library(terra)
#########################################################################
##Load the raster files
path_shape<-"mendoza_basin.shp"
shapefile<-vect(path_shape)
plot(shapefile, main="Mendoza river basin")

########################################################################
##Read a raster file
path_rast<-"dem_mendoza.tif"
dem<-rast(path_rast)
plot(dem)
lines(shapefile,lw=4)
########################################################################
##Cropping and masking the raster to our shape 
cropped_dem<-crop(dem,shapefile)
plot(cropped_dem)
lines(shapefile)
##Crop subset the raster to the same extend of the shapefile
##To clean up the rest of the tiff we need to use the mask 
masked_dem<-mask(cropped_dem,shapefile)
#######################################################################
##plot the whole dataset
plot(masked_dem,grid=T)
##Add countour plots nlevel= how many breaks from the min-max value 
contour(masked_dem, add = TRUE, nlevels = 8, col = "black", lwd = 0.3)
title(main = "Mendoza elevation (m.a.s.l)")
lines(shapefile)
##We can also write the tiff in four folder ###########################
out_folder<-"outputs/dem_mendoza.tiff"
writeRaster(masked_dem,out_folder)
r<-rast(out_folder)
#######################################################################
##The main advantage to a gis approach is that 
##This same process can be done in batches for 
##big data sets, lets go to the next example
##Load the chirps annual netcdf files####################################
path_to_chirps<-"chirps-v2.0.annual.nc"
chirps<-rast(path_to_chirps)
plot(chirps)
plot(chirps[[1]])
lines(shapefile)
#########################################################################
##Lets crop the whole dataset for our shapefile 
c_chirps<-crop(chirps,shapefile)
##Check the extends 
plot(c_chirps[[1]],main="1981-01-01")
lines(shapefile)
##Now mask them
m_chirps<-mask(c_chirps,shapefile)
plot(m_chirps[[1]])
##Adds the isolines from the tiff file, in this case is just for one year 
contour(m_chirps[[1]],nlevels=10,lwd=0.5,col='black',add=T)
lines(shapefile)
#########################################################################
##Mean,max,min annual precipitation for the whole period (1981-2023)
mean_annual_prec<-mean(m_chirps)
max_annual_prec<-max(m_chirps)
min_annual_prec<-min(m_chirps)

plot(mean_annual_prec)
lines(shapefile)

plot(max_annual_prec)
lines(shapefile)


plot(min_annual_prec)
lines(shapefile)
##########################################################################
##extra saving the tiff files in a loop
#########################################################################Ã¤
for(i in 1:42){
 tiff<-m_chirps[[i]]
 name<-time(tiff)
 filename<-paste0("outputs/tiff_by_year/chirps_",name,".tiff")
  writeRaster(tiff,filename)
 }
##Always test for one before doing the whole set 

######################################################################################
##To extract the average values from the shapefile
##we can use
##extract() takes all the pixels inside the extend of the shapefile 
##And takes the values 
##For a point is a list 
##If our shape is a polygon is a 3d matrix (x,y,t)
##The mean function (fun) takes the x-y extend and calculates the mean for the extend 
prec_timeseries<-extract(m_chirps,shapefile,fun="mean",ID=F)
###T is the transpose of the vector for time series###################################
prec_timeseries<-t(prec_timeseries)

plot(t(prec_timeseries),type="l")
##Now lets create some dates for this 
years<-seq(from="1981",to="2022",by=1)
##Now with the 2 vectors (dates and the extracted values)
##We create a dataframe (a type of data structure that can handle more that one data type)

df<-data.frame(years,prec_timeseries[1:42])
## c() help ud concatenate elements in a vector 
## c(a,d)= [a,b]
col_names<-c("Date","mm/year")
colnames(df)<-col_names
plot(df,type="b",main="Mean precipitation in mendoza (1981-2022)",col="blue")
############################################################################################
##Saving a data frame
path_csv<-"outputs/mean_prec_timeseries.csv"
write.csv(df,path_csv)




